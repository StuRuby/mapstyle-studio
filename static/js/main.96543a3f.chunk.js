(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{105:function(e,t,n){e.exports=n(167)},167:function(e,t,n){"use strict";n.r(t);var a={};n.r(a),n.d(a,"test",function(){return $}),n.d(a,"mapStyle",function(){return te});n(106),n(107);var l=n(0),r=n.n(l),c=n(4),s=n(49),i=n(171),o=n(172),m=n(173),u=n(5),p=n(6),d=n(9),f=n(7),b=n(10);function h(){return(h=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function x(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var E,v=r.a.createElement("defs",null,r.a.createElement("style",{type:"text/css"})),y=r.a.createElement("path",{d:"M851.968 167.936l0 109.568-281.6 0 0 587.776-116.736 0 0-587.776-281.6 0 0-109.568 679.936 0z","p-id":2731,fill:"#2c2c2c"}),g=function(e){var t=e.svgRef,n=x(e,["svgRef"]);return r.a.createElement("svg",h({t:1552292647605,className:"icon",style:{},viewBox:"0 0 1024 1024","p-id":2730,width:200,height:200,ref:t},n),v,y)},O=r.a.forwardRef(function(e,t){return r.a.createElement(g,h({svgRef:t},e))}),j=(n.p,n(169)),N=n(20);!function(e){e.Large="large",e.Default="default",e.Small="small"}(E||(E={}));var w=function(e){function t(e){var n;return Object(u.a)(this,t),(n=Object(d.a)(this,Object(f.a)(t).call(this,e))).toggleRenameMode=function(e){e.stopPropagation();var t=n.state.renameMode,a=n.props.labelName;n.setState({renameMode:!t,newName:a,errorMessage:""})},n.state={errorMessage:"",hovered:!1,newName:"",renameMode:!1},n}return Object(b.a)(t,e),Object(p.a)(t,[{key:"render",value:function(){var e=this.props.inputIsSmall,t=this.props.showEditIcon?this.props.showEditIcon:this.state.hovered,n=(this.state.newName,!this.state.renameMode&&this.props.restrictEditToIcon?"cursor-pointer":"");return l.createElement("div",{className:"w-full ".concat(n)},this.state.renameMode?l.createElement(j.a,{size:e,defaultValue:this.props.labelName,addonAfter:l.createElement(N.a,{type:"check",onClick:this.toggleRenameMode}),onPressEnter:this.toggleRenameMode}):l.createElement("div",{className:"".concat(this.props.inputIsSmall?"txt-fancy":""," flex-parent flex-parent--space-between-main"),onClick:this.toggleRenameMode},l.createElement("div",{className:"lex-parent flex-parent--center-cross flex-child flex-child--grow"},l.createElement("div",{className:"txt-truncate"},this.props.labelName,this.props.labelContent&&l.createElement("span",{className:"txt-normal txt-em ml6"},this.props.labelContent))),t&&l.createElement(N.a,{type:"left"})))}}]),t}(l.Component);w.defaultProps={confirmTest:"",inputIsSmall:E.Small,labelTest:"",restrictEditToIcon:!1};var k=function(e){function t(){return Object(u.a)(this,t),Object(d.a)(this,Object(f.a)(t).apply(this,arguments))}return Object(b.a)(t,e),Object(p.a)(t,[{key:"render",value:function(){return l.createElement("div",{className:"flex-parent w-full"},l.createElement("div",{className:"flex-child flex-child--no-shrink"},l.createElement(O,null)),l.createElement("div",{className:"flex-child flex-child--grow"},l.createElement(w,null)))}}]),t}(l.Component),C=function(e){function t(){return Object(u.a)(this,t),Object(d.a)(this,Object(f.a)(t).apply(this,arguments))}return Object(b.a)(t,e),Object(p.a)(t,[{key:"render",value:function(){return l.createElement("button",{type:"button",className:"border-b border--transparent border--gray-dark-on-active flex-child txt-truncate link link--gray h36 txt-xs is-active ml12"},"tab")}}]),t}(l.Component),S=function(e){function t(){return Object(u.a)(this,t),Object(d.a)(this,Object(f.a)(t).apply(this,arguments))}return Object(b.a)(t,e),Object(p.a)(t,[{key:"render",value:function(){return l.createElement("div",{className:"mb-neg1 flex-parent flex-parent--center-cross"},l.createElement(C,null),l.createElement(C,null),l.createElement(C,null),l.createElement(C,null))}}]),t}(l.Component),M=function(e){function t(){return Object(u.a)(this,t),Object(d.a)(this,Object(f.a)(t).apply(this,arguments))}return Object(b.a)(t,e),Object(p.a)(t,[{key:"render",value:function(){return l.createElement("div",{id:"card-style-layers",className:"absolute top left bottom w360 flex-parent flex-parent--column  shadow-darken10 bg-gray-faint border-l border--gray-light",style:{marginLeft:"210px"}},l.createElement("div",{className:"flex-child flex-child--no-shrink flex-parent flex-parent--space-between-main  flex-parent--end-cross bg-gray-faint mx12 border-b border--gray-light"},l.createElement("div",{className:"flex-child flex-child--grow py6 my3 wmin0"},l.createElement(k,null)),l.createElement("div",{className:"flex-child flex-child--no-shrink ml12"},l.createElement(S,null))))}}]),t}(l.Component),P=function(e){function t(){return Object(u.a)(this,t),Object(d.a)(this,Object(f.a)(t).apply(this,arguments))}return Object(b.a)(t,e),Object(p.a)(t,[{key:"render",value:function(){return l.createElement("div",null,l.createElement("div",null,l.createElement("div",{role:"button",className:"flex-parent flex-parent--center-cross flex-parent--space-between-main px12 h24 txt-normal border-t txt-truncate relative transition color-gray-dark w-full  bg-gray-light-on-active bg-darken5-on-hover color-blue-on-hover txt-xs px3  cursor-pointer py3 block border--white"},l.createElement("div",{className:"flex-child flex-child--grow",title:"country-label","data-test":"layer_item-country"},l.createElement("div",{className:"flex-parent flex-parent--center-cross"},l.createElement("div",{className:"relative flex-child flex-child--no-shrink mr3 w12 h12"},l.createElement("div",{className:"h12 w12"},l.createElement("div",{className:"fill-canvas h12 w12 round scroll-hidden events-none"},l.createElement("div",{"data-test":"color_value_preview-swatch",className:"round border h12 w12 border--darken50"})))),l.createElement(O,{className:"events-none icon flex-child flex-child--no-shrink mr3"}),l.createElement("div",{className:"flex-child flex-child--grow txt-truncate"},"country-label"))),l.createElement("div",{className:"cursor-grab"},l.createElement(N.a,{type:"bars"})))))}}]),t}(l.PureComponent),I=function(e){function t(){return Object(u.a)(this,t),Object(d.a)(this,Object(f.a)(t).apply(this,arguments))}return Object(b.a)(t,e),Object(p.a)(t,[{key:"render",value:function(){return l.createElement("div",null,l.createElement("div",{role:"button",className:"flex-parent flex-parent--center-cross flex-parent--space-between-main  px12 h24 txt-normal border-t txt-truncate relative transition color-gray-dark  w-full bg-gray-light-on-active bg-darken5-on-hover color-blue-on-hover txt-xs px3 cursor-pointer  py3 block pl30 border--white"},l.createElement("div",{className:"flex-child flex-child--grow",title:"state-label","data-test":"layer_item-state"},l.createElement("div",{className:"flex-parent flex-parent--center-cross"},l.createElement("div",{className:"relative flex-child flex-child--no-shrink mr3 w12 h12"},l.createElement("div",{className:"h12 w12"},l.createElement("div",{className:"fill-canvas h12 w12 round scroll-hidden events-none"},l.createElement("div",{"data-test":"color_value_preview-swatch",className:"round border h12 w12 border--darken50"})))),l.createElement("div",{className:"flex-child flex-child--grow txt-truncate"},"state-label")))))}}]),t}(l.PureComponent),R=function(e){function t(){return Object(u.a)(this,t),Object(d.a)(this,Object(f.a)(t).apply(this,arguments))}return Object(b.a)(t,e),Object(p.a)(t,[{key:"render",value:function(){return l.createElement("div",{className:"w-full txt-truncate txt-xs"},l.createElement(P,null),l.createElement(I,null),l.createElement(I,null),l.createElement(I,null),l.createElement(I,null))}}]),t}(l.PureComponent),_=function(e){function t(){return Object(u.a)(this,t),Object(d.a)(this,Object(f.a)(t).apply(this,arguments))}return Object(b.a)(t,e),Object(p.a)(t,[{key:"render",value:function(){return l.createElement("div",null,l.createElement(R,null),l.createElement(R,null),l.createElement(R,null),l.createElement(R,null),l.createElement(R,null),l.createElement(R,null))}}]),t}(l.Component),T=function(e){function t(){return Object(u.a)(this,t),Object(d.a)(this,Object(f.a)(t).apply(this,arguments))}return Object(b.a)(t,e),Object(p.a)(t,[{key:"render",value:function(){return l.createElement("div",{className:"txt-xs flex-parent flex-parent--center-cross flex-parent--space-between-main"},l.createElement("div",{className:"flex-child unselectable"},"\u5171\u6709122\u4e2a\u56fe\u5c42"),l.createElement("div",{className:"flex-child py3"}))}}]),t}(l.Component),z=n(170),A=n(168),B={fontSize:"18px",height:"24px",width:"18px"},J=function(e){return l.createElement(z.a,{placement:"right",title:function(){return l.createElement("span",{className:"unselectable"},"\u8fd4\u56de")}},l.createElement(A.a,{className:" ml-neg6 block link",to:e.route},l.createElement(N.a,{type:"left",style:B}),l.createElement(N.a,{type:"github",style:B})))},L=function(e){return l.createElement("div",{className:" flex-parent"},l.createElement("div",{className:"flex-child flex-child--no-shrink"},l.createElement(J,{route:e.route})),l.createElement("div",{className:"flex-child flex-child--grow"},l.createElement(w,{labelName:e.name})))},D=function(e){return l.createElement("div",{className:"pb3"},l.createElement("div",{className:"flex-parent"},l.createElement("div",{className:"flex-child flex-child--no-shrink"},l.createElement(L,{route:"/",name:e.name,onConfirm:e.onConfirm}))))},V=function(e){function t(){return Object(u.a)(this,t),Object(d.a)(this,Object(f.a)(t).apply(this,arguments))}return Object(b.a)(t,e),Object(p.a)(t,[{key:"render",value:function(){return l.createElement("div",{className:"flex-parent flex-parent--center-cross"},l.createElement("div",{className:"txt-xs flex-child flex-child--grow mr12"},l.createElement(z.a,{placement:"top",title:"\u6dfb\u52a0\u56fe\u5c42"},l.createElement("button",{type:"button",className:"btn btn--gray btn--s round px6 w-full"},l.createElement("span",{className:"flex-parent flex-parent--center-cross"},l.createElement("span",{className:"flex-child"},l.createElement(N.a,{type:"file-add",theme:"filled"})),l.createElement("span",{className:"flex-child"},"\u6dfb\u52a0\u56fe\u5c42"))))),l.createElement("div",{className:"flex-child flex-child--no-shrink mr-neg6"},l.createElement("div",{className:"flex-parent"},l.createElement(z.a,{placement:"top",title:"\u590d\u5236\u56fe\u5c42"},l.createElement("button",{type:"button",className:"btn bg-transparent link link--gray txt-xs py3 px3"},l.createElement(N.a,{type:"copy",theme:"filled"}))),l.createElement(z.a,{placement:"top",title:"\u6dfb\u52a0\u5206\u7ec4"},l.createElement("button",{type:"button",className:"btn bg-transparent link link--gray txt-xs py3 px3 px3"},l.createElement(N.a,{type:"folder-open",theme:"filled"}))),l.createElement(z.a,{placement:"top",title:"\u663e\u793a\u56fe\u5c42"},l.createElement("button",{type:"button",className:"btn bg-transparent link link--gray txt-xs py3 px3 px3"},l.createElement(N.a,{type:"eye",theme:"filled"}))),l.createElement(z.a,{placement:"top",title:"\u5220\u9664\u56fe\u5c42"},l.createElement("button",{type:"button",className:"btn bg-transparent link link--gray txt-xs py3 px3 px3"},l.createElement(N.a,{type:"delete",theme:"filled"}))))))}}]),t}(l.Component),q=function(e){function t(){return Object(u.a)(this,t),Object(d.a)(this,Object(f.a)(t).apply(this,arguments))}return Object(b.a)(t,e),Object(p.a)(t,[{key:"render",value:function(){var e=this.props.mapStyle.name;return l.createElement("div",{id:"card-style-layers-pane",className:" absolute top left bottom bg-white flex-parent flex-parent--column ",style:{width:"210px"}},l.createElement("div",{className:"flex-child flex-child--no-shrink my3 pt6 pb6 mx12 border-b border--gray-light"},l.createElement(D,{name:e,route:"/",onConfirm:this.props.renameStylesheet}),l.createElement("div",{className:"mt6 mb6 pt6 border-t border--gray-light"},l.createElement(V,null)),l.createElement("div",null,l.createElement(T,null))),l.createElement("div",{className:"flex-child flex-child--grow scroll-auto scroll-styled"},l.createElement(_,null)))}}]),t}(l.Component),F=Object(s.b)(function(e){return{mapStyle:e.mapStyle}},function(e){return{renameStylesheet:function(t){return e.mapStyle.rename(t)}}})(q),G=function(e){function t(e){return Object(u.a)(this,t),Object(d.a)(this,Object(f.a)(t).call(this,e))}return Object(b.a)(t,e),Object(p.a)(t,[{key:"render",value:function(){return l.createElement("div",{id:"map",className:"absolute top left right bottom fill-canvas mapboxgl-map"})}}]),t}(l.Component),H=function(){return l.createElement("div",{id:"container",className:"bg-white select-none absolute top right bottom left"},l.createElement(G,null),l.createElement("div",null,l.createElement(F,null),l.createElement(M,null)))},K=function(e){return l.createElement("div",null,l.createElement(H,null))},Q=function(){return l.createElement(i.a,null,l.createElement("div",{className:"fixed top right bottom left"},l.createElement(o.a,null,l.createElement(m.a,{exact:!0,path:"/",component:K}))))},U=n(48),W=n(74),X=n.n(W),Y=n(101),Z=function(e){return new Promise(function(t){return setTimeout(t,e)})},$=Object(U.createModel)({state:0,reducers:{increment:function(e){return e+1}},effects:function(e){return{incrementAsync:function(){var t=Object(Y.a)(X.a.mark(function t(){return X.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,Z(500);case 2:e.test.increment();case 3:case"end":return t.stop()}},t)}));return function(){return t.apply(this,arguments)}}()}}}),ee=n(40),te=(n(53),{state:Object.assign({version:8,sources:{},layers:[]},{name:"shixy"}),reducers:{rename:function(e,t){return function(e,t){return Object(ee.a)({},e,{name:t})}(e,t)}},effects:{}}),ne=Object(U.init)({models:a});c.render(l.createElement(s.a,{store:ne},l.createElement(Q,null)),document.getElementById("root"))}},[[105,1,2]]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,