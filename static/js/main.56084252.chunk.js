(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{105:function(e,t,n){e.exports=n(167)},167:function(e,t,n){"use strict";n.r(t);var a={};n.r(a),n.d(a,"test",function(){return $}),n.d(a,"mapStyle",function(){return te});n(106),n(107);var l=n(0),r=n.n(l),c=n(4),i=n(49),s=n(171),o=n(172),m=n(173),u=n(5),p=n(6),d=n(9),f=n(7),b=n(10);function h(){return(h=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function x(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var E,v=r.a.createElement("defs",null,r.a.createElement("style",{type:"text/css"})),y=r.a.createElement("path",{d:"M851.968 167.936l0 109.568-281.6 0 0 587.776-116.736 0 0-587.776-281.6 0 0-109.568 679.936 0z","p-id":2731,fill:"#2c2c2c"}),O=function(e){var t=e.svgRef,n=x(e,["svgRef"]);return r.a.createElement("svg",h({t:1552292647605,className:"icon",style:{},viewBox:"0 0 1024 1024","p-id":2730,width:200,height:200,ref:t},n),v,y)},g=r.a.forwardRef(function(e,t){return r.a.createElement(O,h({svgRef:t},e))}),j=(n.p,n(169)),N=n(20);!function(e){e.Large="large",e.Default="default",e.Small="small"}(E||(E={}));var w=function(e){function t(e){var n;return Object(u.a)(this,t),(n=Object(d.a)(this,Object(f.a)(t).call(this,e))).toggleRenameMode=function(e){e.stopPropagation();var t=n.state.renameMode,a=n.props.labelName;n.setState({renameMode:!t,newName:a})},n.state={newName:"",renameMode:!1},n}return Object(b.a)(t,e),Object(p.a)(t,[{key:"render",value:function(){this.props.inputIsSmall;var e=this.state.renameMode?"":"cursor-pointer";return l.createElement("div",{className:"w-full ".concat(e)},this.state.renameMode?l.createElement(j.a,{size:E.Small,defaultValue:this.props.labelName,addonAfter:l.createElement(N.a,{type:"check",onClick:this.toggleRenameMode}),onPressEnter:this.toggleRenameMode}):l.createElement("div",{className:"".concat(this.props.inputIsSmall?"txt-fancy":""," flex-parent flex-parent--space-between-main"),onClick:this.toggleRenameMode},l.createElement("div",{className:"lex-parent flex-parent--center-cross flex-child flex-child--grow"},l.createElement("div",{className:"txt-truncate"},this.props.labelName,this.props.labelContent&&l.createElement("span",{className:"txt-normal txt-em ml6"},this.props.labelContent)))))}}]),t}(l.Component);w.defaultProps={confirmTest:"",inputIsSmall:E.Small,labelTest:""};var k=function(e){function t(){return Object(u.a)(this,t),Object(d.a)(this,Object(f.a)(t).apply(this,arguments))}return Object(b.a)(t,e),Object(p.a)(t,[{key:"render",value:function(){return l.createElement("div",{className:"flex-parent w-full"},l.createElement("div",{className:"flex-child flex-child--no-shrink"},l.createElement(g,null)),l.createElement("div",{className:"flex-child flex-child--grow"},l.createElement(w,null)))}}]),t}(l.Component),C=function(e){function t(){return Object(u.a)(this,t),Object(d.a)(this,Object(f.a)(t).apply(this,arguments))}return Object(b.a)(t,e),Object(p.a)(t,[{key:"render",value:function(){return l.createElement("button",{type:"button",className:"border-b border--transparent border--gray-dark-on-active flex-child txt-truncate link link--gray h36 txt-xs is-active ml12"},"tab")}}]),t}(l.Component),S=function(e){function t(){return Object(u.a)(this,t),Object(d.a)(this,Object(f.a)(t).apply(this,arguments))}return Object(b.a)(t,e),Object(p.a)(t,[{key:"render",value:function(){return l.createElement("div",{className:"mb-neg1 flex-parent flex-parent--center-cross"},l.createElement(C,null),l.createElement(C,null),l.createElement(C,null),l.createElement(C,null))}}]),t}(l.Component),M=function(e){function t(){return Object(u.a)(this,t),Object(d.a)(this,Object(f.a)(t).apply(this,arguments))}return Object(b.a)(t,e),Object(p.a)(t,[{key:"render",value:function(){return l.createElement("div",{id:"card-style-layers",className:"absolute top left bottom w360 flex-parent flex-parent--column  shadow-darken10 bg-gray-faint border-l border--gray-light",style:{marginLeft:"210px"}},l.createElement("div",{className:"flex-child flex-child--no-shrink flex-parent flex-parent--space-between-main  flex-parent--end-cross bg-gray-faint mx12 border-b border--gray-light"},l.createElement("div",{className:"flex-child flex-child--grow py6 my3 wmin0"},l.createElement(k,null)),l.createElement("div",{className:"flex-child flex-child--no-shrink ml12"},l.createElement(S,null))))}}]),t}(l.Component),P=function(e){function t(){return Object(u.a)(this,t),Object(d.a)(this,Object(f.a)(t).apply(this,arguments))}return Object(b.a)(t,e),Object(p.a)(t,[{key:"render",value:function(){return l.createElement("div",null,l.createElement("div",null,l.createElement("div",{role:"button",className:"flex-parent flex-parent--center-cross flex-parent--space-between-main px12 h24 txt-normal border-t txt-truncate relative transition color-gray-dark w-full  bg-gray-light-on-active bg-darken5-on-hover color-blue-on-hover txt-xs px3  cursor-pointer py3 block border--white"},l.createElement("div",{className:"flex-child flex-child--grow",title:"country-label","data-test":"layer_item-country"},l.createElement("div",{className:"flex-parent flex-parent--center-cross"},l.createElement("div",{className:"relative flex-child flex-child--no-shrink mr3 w12 h12"},l.createElement("div",{className:"h12 w12"},l.createElement("div",{className:"fill-canvas h12 w12 round scroll-hidden events-none"},l.createElement("div",{"data-test":"color_value_preview-swatch",className:"round border h12 w12 border--darken50"})))),l.createElement(g,{className:"events-none icon flex-child flex-child--no-shrink mr3"}),l.createElement("div",{className:"flex-child flex-child--grow txt-truncate"},"country-label"))),l.createElement("div",{className:"cursor-grab"},l.createElement(N.a,{type:"bars"})))))}}]),t}(l.PureComponent),R=function(e){function t(){return Object(u.a)(this,t),Object(d.a)(this,Object(f.a)(t).apply(this,arguments))}return Object(b.a)(t,e),Object(p.a)(t,[{key:"render",value:function(){return l.createElement("div",null,l.createElement("div",{role:"button",className:"flex-parent flex-parent--center-cross flex-parent--space-between-main  px12 h24 txt-normal border-t txt-truncate relative transition color-gray-dark  w-full bg-gray-light-on-active bg-darken5-on-hover color-blue-on-hover txt-xs px3 cursor-pointer  py3 block pl30 border--white"},l.createElement("div",{className:"flex-child flex-child--grow",title:"state-label","data-test":"layer_item-state"},l.createElement("div",{className:"flex-parent flex-parent--center-cross"},l.createElement("div",{className:"relative flex-child flex-child--no-shrink mr3 w12 h12"},l.createElement("div",{className:"h12 w12"},l.createElement("div",{className:"fill-canvas h12 w12 round scroll-hidden events-none"},l.createElement("div",{"data-test":"color_value_preview-swatch",className:"round border h12 w12 border--darken50"})))),l.createElement("div",{className:"flex-child flex-child--grow txt-truncate"},"state-label")))))}}]),t}(l.PureComponent),_=function(e){function t(){return Object(u.a)(this,t),Object(d.a)(this,Object(f.a)(t).apply(this,arguments))}return Object(b.a)(t,e),Object(p.a)(t,[{key:"render",value:function(){return l.createElement("div",{className:"w-full txt-truncate txt-xs"},l.createElement(P,null),l.createElement(R,null),l.createElement(R,null),l.createElement(R,null),l.createElement(R,null))}}]),t}(l.PureComponent),I=function(e){function t(){return Object(u.a)(this,t),Object(d.a)(this,Object(f.a)(t).apply(this,arguments))}return Object(b.a)(t,e),Object(p.a)(t,[{key:"render",value:function(){return l.createElement("div",null,l.createElement(_,null),l.createElement(_,null),l.createElement(_,null),l.createElement(_,null),l.createElement(_,null),l.createElement(_,null))}}]),t}(l.Component),z=function(e){function t(){return Object(u.a)(this,t),Object(d.a)(this,Object(f.a)(t).apply(this,arguments))}return Object(b.a)(t,e),Object(p.a)(t,[{key:"render",value:function(){return l.createElement("div",{className:"txt-xs flex-parent flex-parent--center-cross flex-parent--space-between-main"},l.createElement("div",{className:"flex-child unselectable"},"\u5171\u6709122\u4e2a\u56fe\u5c42"),l.createElement("div",{className:"flex-child py3"}))}}]),t}(l.Component),T=n(170),A=n(168),B={fontSize:"18px",height:"24px",width:"18px"},J=function(e){return l.createElement(T.a,{placement:"right",title:function(){return l.createElement("span",{className:"unselectable"},"\u8fd4\u56de")}},l.createElement(A.a,{className:" ml-neg6 block link",to:e.route},l.createElement(N.a,{type:"left",style:B}),l.createElement(N.a,{type:"github",style:B})))},L=function(e){return l.createElement("div",{className:" flex-parent"},l.createElement("div",{className:"flex-child flex-child--no-shrink"},l.createElement(J,{route:e.route})),l.createElement("div",{className:"flex-child flex-child--grow"},l.createElement(w,{labelName:e.name})))},D=function(e){return l.createElement("div",{className:"pb3"},l.createElement("div",{className:"flex-parent"},l.createElement("div",{className:"flex-child flex-child--no-shrink"},l.createElement(L,{route:"/",name:e.name,onConfirm:e.onConfirm}))))},V=function(e){function t(){return Object(u.a)(this,t),Object(d.a)(this,Object(f.a)(t).apply(this,arguments))}return Object(b.a)(t,e),Object(p.a)(t,[{key:"render",value:function(){return l.createElement("div",{className:"flex-parent flex-parent--center-cross"},l.createElement("div",{className:"txt-xs flex-child flex-child--grow mr12"},l.createElement(T.a,{placement:"top",title:"\u6dfb\u52a0\u56fe\u5c42"},l.createElement("button",{type:"button",className:"btn btn--gray btn--s round px6 w-full"},l.createElement("span",{className:"flex-parent flex-parent--center-cross"},l.createElement("span",{className:"flex-child"},l.createElement(N.a,{type:"file-add",theme:"filled"})),l.createElement("span",{className:"flex-child"},"\u6dfb\u52a0\u56fe\u5c42"))))),l.createElement("div",{className:"flex-child flex-child--no-shrink mr-neg6"},l.createElement("div",{className:"flex-parent"},l.createElement(T.a,{placement:"top",title:"\u590d\u5236\u56fe\u5c42"},l.createElement("button",{type:"button",className:"btn bg-transparent link link--gray txt-xs py3 px3"},l.createElement(N.a,{type:"copy",theme:"filled"}))),l.createElement(T.a,{placement:"top",title:"\u6dfb\u52a0\u5206\u7ec4"},l.createElement("button",{type:"button",className:"btn bg-transparent link link--gray txt-xs py3 px3 px3"},l.createElement(N.a,{type:"folder-open",theme:"filled"}))),l.createElement(T.a,{placement:"top",title:"\u663e\u793a\u56fe\u5c42"},l.createElement("button",{type:"button",className:"btn bg-transparent link link--gray txt-xs py3 px3 px3"},l.createElement(N.a,{type:"eye",theme:"filled"}))),l.createElement(T.a,{placement:"top",title:"\u5220\u9664\u56fe\u5c42"},l.createElement("button",{type:"button",className:"btn bg-transparent link link--gray txt-xs py3 px3 px3"},l.createElement(N.a,{type:"delete",theme:"filled"}))))))}}]),t}(l.Component),q=function(e){function t(){return Object(u.a)(this,t),Object(d.a)(this,Object(f.a)(t).apply(this,arguments))}return Object(b.a)(t,e),Object(p.a)(t,[{key:"render",value:function(){var e=this.props.mapStyle.name;return l.createElement("div",{id:"card-style-layers-pane",className:" absolute top left bottom bg-white flex-parent flex-parent--column ",style:{width:"210px"}},l.createElement("div",{className:"flex-child flex-child--no-shrink my3 pt6 pb6 mx12 border-b border--gray-light"},l.createElement(D,{name:e,route:"/",onConfirm:this.props.renameStylesheet}),l.createElement("div",{className:"mt6 mb6 pt6 border-t border--gray-light"},l.createElement(V,null)),l.createElement("div",null,l.createElement(z,null))),l.createElement("div",{className:"flex-child flex-child--grow scroll-auto scroll-styled"},l.createElement(I,null)))}}]),t}(l.Component),F=Object(i.b)(function(e){return{mapStyle:e.mapStyle}},function(e){return{renameStylesheet:function(t){return e.mapStyle.rename(t)}}})(q),G=function(e){function t(e){return Object(u.a)(this,t),Object(d.a)(this,Object(f.a)(t).call(this,e))}return Object(b.a)(t,e),Object(p.a)(t,[{key:"render",value:function(){return l.createElement("div",{id:"map",className:"absolute top left right bottom fill-canvas mapboxgl-map"})}}]),t}(l.Component),H=function(){return l.createElement("div",{id:"container",className:"bg-white select-none absolute top right bottom left"},l.createElement(G,null),l.createElement("div",null,l.createElement(F,null),l.createElement(M,null)))},K=function(e){return l.createElement("div",null,l.createElement(H,null))},Q=function(){return l.createElement(s.a,null,l.createElement("div",{className:"fixed top right bottom left"},l.createElement(o.a,null,l.createElement(m.a,{exact:!0,path:"/",component:K}))))},U=n(48),W=n(74),X=n.n(W),Y=n(101),Z=function(e){return new Promise(function(t){return setTimeout(t,e)})},$=Object(U.createModel)({state:0,reducers:{increment:function(e){return e+1}},effects:function(e){return{incrementAsync:function(){var t=Object(Y.a)(X.a.mark(function t(){return X.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,Z(500);case 2:e.test.increment();case 3:case"end":return t.stop()}},t)}));return function(){return t.apply(this,arguments)}}()}}}),ee=n(40),te=(n(53),{state:Object.assign({version:8,sources:{},layers:[]},{name:"shixy"}),reducers:{rename:function(e,t){return function(e,t){return Object(ee.a)({},e,{name:t})}(e,t)}},effects:{}}),ne=Object(U.init)({models:a});c.render(l.createElement(i.a,{store:ne},l.createElement(Q,null)),document.getElementById("root"))}},[[105,1,2]]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9zdmdzL1Quc3ZnIiwiY29tcG9uZW50cy9zaGFyZWQvUmVuYW1lSW5wdXQudHN4IiwiY29tcG9uZW50cy9sYXllcnMvU3R5bGVMYXllck5hbWUudHN4IiwiY29tcG9uZW50cy9zaGFyZWQvVGFibGlzdEl0ZW0udHN4IiwiY29tcG9uZW50cy9zaGFyZWQvVGFibGlzdC50c3giLCJjb250YWluZXJzL2xheWVyRWRpdG9yL2luZGV4LnRzeCIsImNvbXBvbmVudHMvbGF5ZXJzL0xheWVyR3JvdXBOYW1lLnRzeCIsImNvbXBvbmVudHMvbGF5ZXJzL1N0eWxlTGF5ZXJJdGVtLnRzeCIsImNvbXBvbmVudHMvbGF5ZXJzL1N0eWxlTGF5ZXJHcm91cC50c3giLCJjb250YWluZXJzL2xheWVyTGlzdC9MYXllckJyb3dzZUxpc3QudHN4IiwiY29udGFpbmVycy9sYXllckxpc3QvTGF5ZXJGaWx0ZXJBY3Rpb25zLnRzeCIsImNvbXBvbmVudHMvc2hhcmVkL0VkaXRvckJhY2tCdXR0b24udHN4IiwiY29tcG9uZW50cy9zaGFyZWQvRWRpdG9yVGl0bGUudHN4IiwiY29udGFpbmVycy9sYXllckxpc3QvTGF5ZXJIZWFkZXIudHN4IiwiY29udGFpbmVycy9sYXllckxpc3QvTGF5ZXJTZWxlY3RlZEFjdGlvbnMudHN4IiwiY29udGFpbmVycy9sYXllckxpc3QvaW5kZXgudHN4IiwiY29udGFpbmVycy9tYXAvaW5kZXgudHN4Iiwidmlld3MvRWRpdG9yLnRzeCIsIkFwcC50c3giLCJyb3V0ZXIudHN4IiwibW9kZWxzL3Rlc3QudHMiLCJtb2RlbHMvbWFwU3R5bGUudHMiLCJ1dGlscy9zdHlsZS50cyIsInN0b3JlLnRzIiwiaW5kZXgudHN4Il0sIm5hbWVzIjpbIl9leHRlbmRzIiwiT2JqZWN0IiwiYXNzaWduIiwidGFyZ2V0IiwiaSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInNvdXJjZSIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImFwcGx5IiwidGhpcyIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsImV4Y2x1ZGVkIiwic291cmNlS2V5cyIsImtleXMiLCJpbmRleE9mIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJzb3VyY2VTeW1ib2xLZXlzIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJJbnB1dFNpemUiLCJfcmVmMiIsInJlYWN0X2RlZmF1bHQiLCJhIiwiY3JlYXRlRWxlbWVudCIsInR5cGUiLCJfcmVmMyIsImQiLCJwLWlkIiwiZmlsbCIsIlRfU3ZnVCIsIl9yZWYiLCJzdmdSZWYiLCJwcm9wcyIsInQiLCJjbGFzc05hbWUiLCJzdHlsZSIsInZpZXdCb3giLCJ3aWR0aCIsImhlaWdodCIsInJlZiIsIkZvcndhcmRSZWYiLCJmb3J3YXJkUmVmIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsInAiLCJSZW5hbWVJbnB1dCIsIl90aGlzIiwiY2xhc3NDYWxsQ2hlY2siLCJwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiZ2V0UHJvdG90eXBlT2YiLCJ0b2dnbGVSZW5hbWVNb2RlIiwiZSIsInN0b3BQcm9wYWdhdGlvbiIsInJlbmFtZU1vZGUiLCJzdGF0ZSIsImxhYmVsTmFtZSIsInNldFN0YXRlIiwibmV3TmFtZSIsImlucHV0SXNTbWFsbCIsImN1cnNvclBvaW50ZXIiLCJyZWFjdCIsImNvbmNhdCIsImlucHV0Iiwic2l6ZSIsIlNtYWxsIiwiZGVmYXVsdFZhbHVlIiwiYWRkb25BZnRlciIsImljb24iLCJvbkNsaWNrIiwib25QcmVzc0VudGVyIiwibGFiZWxDb250ZW50IiwiUmVhY3QiLCJkZWZhdWx0UHJvcHMiLCJjb25maXJtVGVzdCIsImxhYmVsVGVzdCIsIlN0eWxlTGF5ZXJOYW1lIiwiUmVuYW1lSW5wdXRfUmVuYW1lSW5wdXQiLCJUYWJsaXN0SXRlbSIsIlRhYmxpc3QiLCJUYWJsaXN0SXRlbV9UYWJsaXN0SXRlbSIsIkxheWVyRWRpdG9yIiwiaWQiLCJtYXJnaW5MZWZ0IiwiU3R5bGVMYXllck5hbWVfU3R5bGVMYXllck5hbWUiLCJUYWJsaXN0X1RhYmxpc3QiLCJMYXllckdyb3VwTmFtZSIsInJvbGUiLCJ0aXRsZSIsImRhdGEtdGVzdCIsIlN0eWxlTGF5ZXJJdGVtIiwiU3R5bGVMYXllckdyb3VwIiwiTGF5ZXJHcm91cE5hbWVfTGF5ZXJHcm91cE5hbWUiLCJTdHlsZUxheWVySXRlbV9TdHlsZUxheWVySXRlbSIsIkxheWVyQnJvd3NlTGlzdCIsIlN0eWxlTGF5ZXJHcm91cF9TdHlsZUxheWVyR3JvdXAiLCJMYXllckZpbHRlckFjdGlvbnMiLCJpY29uU3R5bGUiLCJmb250U2l6ZSIsIkVkaXRvckJhY2tCdXR0b24iLCJ0b29sdGlwIiwicGxhY2VtZW50IiwiTGluayIsInRvIiwicm91dGUiLCJFZGl0b3JUaXRsZSIsInNoYXJlZF9FZGl0b3JCYWNrQnV0dG9uIiwibmFtZSIsIkxheWVySGVhZGVyIiwic2hhcmVkX0VkaXRvclRpdGxlIiwib25Db25maXJtIiwiTGF5ZXJTZWxlY3RlZEFjdGlvbnMiLCJ0aGVtZSIsIkxheWVyTGlzdCIsIm1hcFN0eWxlIiwibGF5ZXJMaXN0X0xheWVySGVhZGVyIiwicmVuYW1lU3R5bGVzaGVldCIsIkxheWVyU2VsZWN0ZWRBY3Rpb25zX0xheWVyU2VsZWN0ZWRBY3Rpb25zIiwiTGF5ZXJGaWx0ZXJBY3Rpb25zX0xheWVyRmlsdGVyQWN0aW9ucyIsIkxheWVyQnJvd3NlTGlzdF9MYXllckJyb3dzZUxpc3QiLCJjb25uZWN0IiwiZGlzcGF0Y2giLCJyZW5hbWUiLCJNYXAiLCJFZGl0b3IiLCJtYXBfTWFwIiwibGF5ZXJMaXN0IiwibGF5ZXJFZGl0b3JfTGF5ZXJFZGl0b3IiLCJBcHAiLCJ2aWV3c19FZGl0b3IiLCJBcHBSb3V0ZXIiLCJIYXNoUm91dGVyIiwiU3dpdGNoIiwiUm91dGUiLCJleGFjdCIsInBhdGgiLCJjb21wb25lbnQiLCJkZWxheSIsIm1zIiwiUHJvbWlzZSIsInJlc29sdmUiLCJzZXRUaW1lb3V0IiwidGVzdCIsImNyZWF0ZU1vZGVsIiwicmVkdWNlcnMiLCJpbmNyZW1lbnQiLCJlZmZlY3RzIiwiaW5jcmVtZW50QXN5bmMiLCJfaW5jcmVtZW50QXN5bmMiLCJhc3luY1RvR2VuZXJhdG9yIiwicmVnZW5lcmF0b3JfZGVmYXVsdCIsIm1hcmsiLCJfY2FsbGVlIiwid3JhcCIsIl9jb250ZXh0IiwicHJldiIsIm5leHQiLCJzdG9wIiwidmVyc2lvbiIsInNvdXJjZXMiLCJsYXllcnMiLCJvYmplY3RTcHJlYWQiLCJyZU5hbWVTdHlsZSIsInN0b3JlIiwiaW5pdCIsIm1vZGVscyIsIlJlYWN0RE9NIiwiZXMiLCJyb3V0ZXIiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIl0sIm1hcHBpbmdzIjoia1ZBQUEsU0FBQUEsSUFBbVIsT0FBOVBBLEVBQUFDLE9BQUFDLFFBQUEsU0FBQUMsR0FBZ0QsUUFBQUMsRUFBQSxFQUFnQkEsRUFBQUMsVUFBQUMsT0FBc0JGLElBQUEsQ0FBTyxJQUFBRyxFQUFBRixVQUFBRCxHQUEyQixRQUFBSSxLQUFBRCxFQUEwQk4sT0FBQVEsVUFBQUMsZUFBQUMsS0FBQUosRUFBQUMsS0FBeURMLEVBQUFLLEdBQUFELEVBQUFDLElBQWlDLE9BQUFMLElBQWtCUyxNQUFBQyxLQUFBUixXQUVuUixTQUFBUyxFQUFBUCxFQUFBUSxHQUFxRCxTQUFBUixFQUFBLFNBQStCLElBQThEQyxFQUFBSixFQUE5REQsRUFFcEYsU0FBQUksRUFBQVEsR0FBMEQsU0FBQVIsRUFBQSxTQUErQixJQUF1REMsRUFBQUosRUFBdkRELEVBQUEsR0FBaUJhLEVBQUFmLE9BQUFnQixLQUFBVixHQUFrRCxJQUFBSCxFQUFBLEVBQVlBLEVBQUFZLEVBQUFWLE9BQXVCRixJQUFPSSxFQUFBUSxFQUFBWixHQUFxQlcsRUFBQUcsUUFBQVYsSUFBQSxJQUEwQ0wsRUFBQUssR0FBQUQsRUFBQUMsSUFBNkIsT0FBQUwsRUFGOU1nQixDQUFBWixFQUFBUSxHQUEwRSxHQUFBZCxPQUFBbUIsc0JBQUEsQ0FBb0MsSUFBQUMsRUFB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LE9BQUFGLEVBQUE5SCxFQUFBaUksS0FBQSxTQUFBQyxHQUFBLGNBQUFBLEVBQUFDLEtBQUFELEVBQUFFLE1BQUEsY0FBQUYsRUFBQUUsS0FBQSxFQUVWbkIsRUFBTSxLQUZJLE9BR2hCaEIsRUFBU3FCLEtBQUtHLFlBSEUsd0JBQUFTLEVBQUFHLFNBQUFMLE1BQUEseUJBQUFKLEVBQUExSSxNQUFBQyxLQUFBUixZQUFBLGdCQ1ZiK0csVUFBQSxDQUNYM0QsTUFIY3hELE9BQU9DLE9DQVEsQ0FDN0I4SixRQUFTLEVBQ1RDLFFBQVMsR0FDVEMsT0FBUSxJREhnQyxDQUFFckQsS0FBTSxVQUloRHFDLFNBQVUsQ0FDTnRCLE9BRE0sU0FDQ25FLEVBQWNvRCxHQUNqQixPQ2tCc0QsU0FDOUR0RSxFQUNBc0UsR0FFQSxPQUFPNUcsT0FBQWtLLEdBQUEsRUFBQWxLLENBQUEsR0FDQXNDLEVBRFAsQ0FFSXNFLFNEeEJXdUQsQ0FBWTNHLEVBQU9vRCxLQUdsQ3VDLFFBQVMsS0VUQWlCLEdBQVFDLGVBQUssQ0FDdEJDLFdDSUpDLFNBQ0l6RyxFQUFBLGNBQUMwRyxFQUFBLEVBQUQsQ0FBVUosTUFBT0EsSUFDYnRHLEVBQUEsY0FBQzJHLEVBQUQsT0FFSkMsU0FBU0MsZUFBZSIsImZpbGUiOiJzdGF0aWMvanMvbWFpbi41NjA4NDI1Mi5jaHVuay5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzb3VyY2UsIGV4Y2x1ZGVkKSB7IGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9OyB2YXIgdGFyZ2V0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCk7IHZhciBrZXksIGk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzb3VyY2VTeW1ib2xLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpOyBmb3IgKGkgPSAwOyBpIDwgc291cmNlU3ltYm9sS2V5cy5sZW5ndGg7IGkrKykgeyBrZXkgPSBzb3VyY2VTeW1ib2xLZXlzW2ldOyBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzb3VyY2UsIGtleSkpIGNvbnRpbnVlOyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7IGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9OyB2YXIgdGFyZ2V0ID0ge307IHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTsgdmFyIGtleSwgaTsgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHsga2V5ID0gc291cmNlS2V5c1tpXTsgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxudmFyIF9yZWYyID1cbi8qI19fUFVSRV9fKi9cblJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkZWZzXCIsIG51bGwsIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiLCB7XG4gIHR5cGU6IFwidGV4dC9jc3NcIlxufSkpO1xuXG52YXIgX3JlZjMgPVxuLyojX19QVVJFX18qL1xuUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICBkOiBcIk04NTEuOTY4IDE2Ny45MzZsMCAxMDkuNTY4LTI4MS42IDAgMCA1ODcuNzc2LTExNi43MzYgMCAwLTU4Ny43NzYtMjgxLjYgMCAwLTEwOS41NjggNjc5LjkzNiAwelwiLFxuICBcInAtaWRcIjogMjczMSxcbiAgZmlsbDogXCIjMmMyYzJjXCJcbn0pO1xuXG52YXIgU3ZnVCA9IGZ1bmN0aW9uIFN2Z1QoX3JlZikge1xuICB2YXIgc3ZnUmVmID0gX3JlZi5zdmdSZWYsXG4gICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLCBbXCJzdmdSZWZcIl0pO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3ZnXCIsIF9leHRlbmRzKHtcbiAgICB0OiAxNTUyMjkyNjQ3NjA1LFxuICAgIGNsYXNzTmFtZTogXCJpY29uXCIsXG4gICAgc3R5bGU6IHt9LFxuICAgIHZpZXdCb3g6IFwiMCAwIDEwMjQgMTAyNFwiLFxuICAgIFwicC1pZFwiOiAyNzMwLFxuICAgIHdpZHRoOiAyMDAsXG4gICAgaGVpZ2h0OiAyMDAsXG4gICAgcmVmOiBzdmdSZWZcbiAgfSwgcHJvcHMpLCBfcmVmMiwgX3JlZjMpO1xufTtcblxudmFyIEZvcndhcmRSZWYgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIChwcm9wcywgcmVmKSB7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFN2Z1QsIF9leHRlbmRzKHtcbiAgICBzdmdSZWY6IHJlZlxuICB9LCBwcm9wcykpO1xufSk7XG5leHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwic3RhdGljL21lZGlhL1QuNjI5OTcwMzAuc3ZnXCI7XG5leHBvcnQgeyBGb3J3YXJkUmVmIGFzIFJlYWN0Q29tcG9uZW50IH07IiwiaW1wb3J0IHsgSWNvbiwgSW5wdXQsIFRvb2x0aXAgfSBmcm9tICdhbnRkJztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxuZW51bSBJbnB1dFNpemUge1xuICAgIExhcmdlID0gJ2xhcmdlJyxcbiAgICBEZWZhdWx0ID0gJ2RlZmF1bHQnLFxuICAgIFNtYWxsID0gJ3NtYWxsJyxcbn1cblxuaW50ZXJmYWNlIElQcm9wcyB7XG4gICAgbGFiZWxOYW1lOiBzdHJpbmc7XG4gICAgaXNWYWxpZE5hbWU6ICgpID0+IHZvaWQ7XG4gICAgaW5wdXRJc1NtYWxsOiBJbnB1dFNpemU7XG4gICAgb25Db25maXJtOiAobmFtZTogc3RyaW5nKSA9PiB2b2lkO1xuICAgIC8vIHJlc3RyaWN0RWRpdFRvSWNvbjogYm9vbGVhbjtcbiAgICBsYWJlbFRlc3Q6IHN0cmluZztcbiAgICBjb25maXJtVGVzdDogc3RyaW5nO1xuICAgIHRyaWdnZXJUZXN0Pzogc3RyaW5nO1xuICAgIGxhYmVsQ29udGVudD86IGFueTtcbiAgICBzaG93RWRpdEljb24/OiBib29sZWFuO1xufVxuXG5pbnRlcmZhY2UgSVN0YXRlIHtcbiAgICByZW5hbWVNb2RlOiBib29sZWFuO1xuICAgIG5ld05hbWU6IHN0cmluZztcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVuYW1lSW5wdXQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8SVByb3BzLCBJU3RhdGU+IHtcbiAgICBwdWJsaWMgc3RhdGljIGRlZmF1bHRQcm9wczogUGFydGlhbDxJUHJvcHM+ID0ge1xuICAgICAgICBjb25maXJtVGVzdDogJycsXG4gICAgICAgIGlucHV0SXNTbWFsbDogSW5wdXRTaXplLlNtYWxsLFxuICAgICAgICBsYWJlbFRlc3Q6ICcnLFxuICAgICAgICAvLyByZXN0cmljdEVkaXRUb0ljb246IGZhbHNlLFxuICAgIH07XG4gICAgY29uc3RydWN0b3IocHJvcHM6IElQcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBuZXdOYW1lOiAnJyxcbiAgICAgICAgICAgIHJlbmFtZU1vZGU6IGZhbHNlLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHB1YmxpYyB0b2dnbGVSZW5hbWVNb2RlID0gKGU6IFJlYWN0LkZvcm1FdmVudCkgPT4ge1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICBjb25zdCB7IHJlbmFtZU1vZGUgfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgIGNvbnN0IHsgbGFiZWxOYW1lIH0gPSB0aGlzLnByb3BzO1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHJlbmFtZU1vZGU6ICFyZW5hbWVNb2RlLFxuICAgICAgICAgICAgbmV3TmFtZTogbGFiZWxOYW1lLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcHVibGljIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3QgeyBpbnB1dElzU21hbGwgfSA9IHRoaXMucHJvcHM7XG5cbiAgICAgICAgY29uc3QgY3Vyc29yUG9pbnRlciA9ICF0aGlzLnN0YXRlLnJlbmFtZU1vZGUgPyAnY3Vyc29yLXBvaW50ZXInIDogJyc7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17YHctZnVsbCAke2N1cnNvclBvaW50ZXJ9YH0+XG4gICAgICAgICAgICAgICAge3RoaXMuc3RhdGUucmVuYW1lTW9kZSA/IChcbiAgICAgICAgICAgICAgICAgICAgPElucHV0XG4gICAgICAgICAgICAgICAgICAgICAgICBzaXplPXtJbnB1dFNpemUuU21hbGx9XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0VmFsdWU9e3RoaXMucHJvcHMubGFiZWxOYW1lfVxuICAgICAgICAgICAgICAgICAgICAgICAgYWRkb25BZnRlcj17XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPEljb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cImNoZWNrXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy50b2dnbGVSZW5hbWVNb2RlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBvblByZXNzRW50ZXI9e3RoaXMudG9nZ2xlUmVuYW1lTW9kZX1cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2Ake1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuaW5wdXRJc1NtYWxsID8gJ3R4dC1mYW5jeScgOiAnJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBmbGV4LXBhcmVudCBmbGV4LXBhcmVudC0tc3BhY2UtYmV0d2Vlbi1tYWluYH1cbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMudG9nZ2xlUmVuYW1lTW9kZX1cbiAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJsZXgtcGFyZW50IGZsZXgtcGFyZW50LS1jZW50ZXItY3Jvc3MgZmxleC1jaGlsZCBmbGV4LWNoaWxkLS1ncm93XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0eHQtdHJ1bmNhdGVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3RoaXMucHJvcHMubGFiZWxOYW1lfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5sYWJlbENvbnRlbnQgJiYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwidHh0LW5vcm1hbCB0eHQtZW0gbWw2XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3RoaXMucHJvcHMubGFiZWxDb250ZW50fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBSZWFjdENvbXBvbmVudCBhcyBUU3ZnIH0gZnJvbSAnLi4vLi4vYXNzZXRzL3N2Z3MvVC5zdmcnO1xuaW1wb3J0IFJlbmFtZUlucHV0IGZyb20gJy4uL3NoYXJlZC9SZW5hbWVJbnB1dCc7XG5cbmludGVyZmFjZSBJUHJvcHMge31cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3R5bGVMYXllck5hbWUgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8SVByb3BzPiB7XG4gICAgcHVibGljIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleC1wYXJlbnQgdy1mdWxsXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4LWNoaWxkIGZsZXgtY2hpbGQtLW5vLXNocmlua1wiPlxuICAgICAgICAgICAgICAgICAgICA8VFN2ZyAvPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleC1jaGlsZCBmbGV4LWNoaWxkLS1ncm93XCI+XG4gICAgICAgICAgICAgICAgICAgIDxSZW5hbWVJbnB1dCAvPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfVxufVxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUYWJsaXN0SXRlbSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDx7fT4ge1xuICAgIHB1YmxpYyByZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IHRhYkJ0bkNsYXNzID1cbiAgICAgICAgICAgICdib3JkZXItYiBib3JkZXItLXRyYW5zcGFyZW50IGJvcmRlci0tZ3JheS1kYXJrLW9uLWFjdGl2ZSAnICtcbiAgICAgICAgICAgICdmbGV4LWNoaWxkIHR4dC10cnVuY2F0ZSBsaW5rIGxpbmstLWdyYXkgaDM2IHR4dC14cyBpcy1hY3RpdmUgbWwxMic7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzc05hbWU9e3RhYkJ0bkNsYXNzfT5cbiAgICAgICAgICAgICAgICB0YWJcbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICApO1xuICAgIH1cbn1cbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBUYWJsaXN0SXRlbSBmcm9tICcuL1RhYmxpc3RJdGVtJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGFibGlzdCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDx7fT4ge1xuICAgIHB1YmxpYyByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1iLW5lZzEgZmxleC1wYXJlbnQgZmxleC1wYXJlbnQtLWNlbnRlci1jcm9zc1wiPlxuICAgICAgICAgICAgICAgIDxUYWJsaXN0SXRlbSAvPlxuICAgICAgICAgICAgICAgIDxUYWJsaXN0SXRlbSAvPlxuICAgICAgICAgICAgICAgIDxUYWJsaXN0SXRlbSAvPlxuICAgICAgICAgICAgICAgIDxUYWJsaXN0SXRlbSAvPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfVxufVxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFN0eWxlTGF5ZXJOYW1lIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvbGF5ZXJzL1N0eWxlTGF5ZXJOYW1lJztcbmltcG9ydCBUYWJsaXN0IGZyb20gJy4uLy4uL2NvbXBvbmVudHMvc2hhcmVkL1RhYmxpc3QnO1xuXG5pbnRlcmZhY2UgSVByb3BzIHtcbiAgICB0ZXN0Pzogc3RyaW5nO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMYXllckVkaXRvciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxJUHJvcHM+IHtcbiAgICBwdWJsaWMgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgIGlkPVwiY2FyZC1zdHlsZS1sYXllcnNcIlxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImFic29sdXRlIHRvcCBsZWZ0IGJvdHRvbSB3MzYwIGZsZXgtcGFyZW50IGZsZXgtcGFyZW50LS1jb2x1bW4gXG4gICAgICAgICAgICAgICAgc2hhZG93LWRhcmtlbjEwIGJnLWdyYXktZmFpbnQgYm9yZGVyLWwgYm9yZGVyLS1ncmF5LWxpZ2h0XCJcbiAgICAgICAgICAgICAgICBzdHlsZT17eyBtYXJnaW5MZWZ0OiAnMjEwcHgnIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJmbGV4LWNoaWxkIGZsZXgtY2hpbGQtLW5vLXNocmluayBmbGV4LXBhcmVudCBmbGV4LXBhcmVudC0tc3BhY2UtYmV0d2Vlbi1tYWluIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZsZXgtcGFyZW50LS1lbmQtY3Jvc3MgYmctZ3JheS1mYWludCBteDEyIGJvcmRlci1iIGJvcmRlci0tZ3JheS1saWdodFwiXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXgtY2hpbGQgZmxleC1jaGlsZC0tZ3JvdyBweTYgbXkzIHdtaW4wXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8U3R5bGVMYXllck5hbWUgLz5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleC1jaGlsZCBmbGV4LWNoaWxkLS1uby1zaHJpbmsgbWwxMlwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFRhYmxpc3QgLz5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBJY29uIH0gZnJvbSAnYW50ZCc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBSZWFjdENvbXBvbmVudCBhcyBUU3ZnIH0gZnJvbSAnLi4vLi4vYXNzZXRzL3N2Z3MvVC5zdmcnO1xuXG5pbnRlcmZhY2UgSVByb3BzIHt9XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExheWVyR3JvdXBOYW1lIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudDxJUHJvcHM+IHtcbiAgICBwdWJsaWMgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICAgICAgICByb2xlPVwiYnV0dG9uXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImZsZXgtcGFyZW50IGZsZXgtcGFyZW50LS1jZW50ZXItY3Jvc3MgZmxleC1wYXJlbnQtLXNwYWNlLWJldHdlZW4tbWFpbiBweDEyXG4gICAgICAgICAgICAgICAgICAgIGgyNCB0eHQtbm9ybWFsIGJvcmRlci10IHR4dC10cnVuY2F0ZSByZWxhdGl2ZSB0cmFuc2l0aW9uIGNvbG9yLWdyYXktZGFyayB3LWZ1bGwgXG4gICAgICAgICAgICAgICAgICAgIGJnLWdyYXktbGlnaHQtb24tYWN0aXZlIGJnLWRhcmtlbjUtb24taG92ZXIgY29sb3ItYmx1ZS1vbi1ob3ZlciB0eHQteHMgcHgzIFxuICAgICAgICAgICAgICAgICAgICBjdXJzb3ItcG9pbnRlciBweTMgYmxvY2sgYm9yZGVyLS13aGl0ZVwiXG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJmbGV4LWNoaWxkIGZsZXgtY2hpbGQtLWdyb3dcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPVwiY291bnRyeS1sYWJlbFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10ZXN0PVwibGF5ZXJfaXRlbS1jb3VudHJ5XCJcbiAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXgtcGFyZW50IGZsZXgtcGFyZW50LS1jZW50ZXItY3Jvc3NcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyZWxhdGl2ZSBmbGV4LWNoaWxkIGZsZXgtY2hpbGQtLW5vLXNocmluayBtcjMgdzEyIGgxMlwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJoMTIgdzEyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmaWxsLWNhbnZhcyBoMTIgdzEyIHJvdW5kIHNjcm9sbC1oaWRkZW4gZXZlbnRzLW5vbmVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10ZXN0PVwiY29sb3JfdmFsdWVfcHJldmlldy1zd2F0Y2hcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwicm91bmQgYm9yZGVyIGgxMiB3MTIgYm9yZGVyLS1kYXJrZW41MFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUU3ZnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJldmVudHMtbm9uZSBpY29uIGZsZXgtY2hpbGQgZmxleC1jaGlsZC0tbm8tc2hyaW5rIG1yM1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzdHlsZT17eyB3aWR0aDogJzE4cHgnLCBoZWlnaHQ6ICcxOHB4JyB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXgtY2hpbGQgZmxleC1jaGlsZC0tZ3JvdyB0eHQtdHJ1bmNhdGVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50cnktbGFiZWxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY3Vyc29yLWdyYWJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8SWNvbiB0eXBlPVwiYmFyc1wiIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmludGVyZmFjZSBJUHJvcHMge31cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3R5bGVMYXllckl0ZW0gZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50PElQcm9wcz4ge1xuICAgIHB1YmxpYyByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgICAgcm9sZT1cImJ1dHRvblwiXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImZsZXgtcGFyZW50IGZsZXgtcGFyZW50LS1jZW50ZXItY3Jvc3MgZmxleC1wYXJlbnQtLXNwYWNlLWJldHdlZW4tbWFpbiBcbiAgICAgICAgICAgICAgICBweDEyIGgyNCB0eHQtbm9ybWFsIGJvcmRlci10IHR4dC10cnVuY2F0ZSByZWxhdGl2ZSB0cmFuc2l0aW9uIGNvbG9yLWdyYXktZGFyayBcbiAgICAgICAgICAgICAgICB3LWZ1bGwgYmctZ3JheS1saWdodC1vbi1hY3RpdmUgYmctZGFya2VuNS1vbi1ob3ZlciBjb2xvci1ibHVlLW9uLWhvdmVyIHR4dC14cyBweDMgY3Vyc29yLXBvaW50ZXIgXG4gICAgICAgICAgICAgICAgcHkzIGJsb2NrIHBsMzAgYm9yZGVyLS13aGl0ZVwiXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJmbGV4LWNoaWxkIGZsZXgtY2hpbGQtLWdyb3dcIlxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9XCJzdGF0ZS1sYWJlbFwiXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRlc3Q9XCJsYXllcl9pdGVtLXN0YXRlXCJcbiAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4LXBhcmVudCBmbGV4LXBhcmVudC0tY2VudGVyLWNyb3NzXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyZWxhdGl2ZSBmbGV4LWNoaWxkIGZsZXgtY2hpbGQtLW5vLXNocmluayBtcjMgdzEyIGgxMlwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImgxMiB3MTJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmlsbC1jYW52YXMgaDEyIHcxMiByb3VuZCBzY3JvbGwtaGlkZGVuIGV2ZW50cy1ub25lXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRlc3Q9XCJjb2xvcl92YWx1ZV9wcmV2aWV3LXN3YXRjaFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInJvdW5kIGJvcmRlciBoMTIgdzEyIGJvcmRlci0tZGFya2VuNTBcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4LWNoaWxkIGZsZXgtY2hpbGQtLWdyb3cgdHh0LXRydW5jYXRlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLWxhYmVsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgTGF5ZXJHcm91cE5hbWUgZnJvbSAnLi9MYXllckdyb3VwTmFtZSc7XG5pbXBvcnQgU3R5bGVMYXllckl0ZW0gZnJvbSAnLi9TdHlsZUxheWVySXRlbSc7XG5cbmludGVyZmFjZSBJUHJvcHMge31cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3R5bGVMYXllckdyb3VwIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudDxJUHJvcHM+IHtcbiAgICBwdWJsaWMgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3LWZ1bGwgdHh0LXRydW5jYXRlIHR4dC14c1wiPlxuICAgICAgICAgICAgICAgIDxMYXllckdyb3VwTmFtZSAvPlxuICAgICAgICAgICAgICAgIDxTdHlsZUxheWVySXRlbSAvPlxuICAgICAgICAgICAgICAgIDxTdHlsZUxheWVySXRlbSAvPlxuICAgICAgICAgICAgICAgIDxTdHlsZUxheWVySXRlbSAvPlxuICAgICAgICAgICAgICAgIDxTdHlsZUxheWVySXRlbSAvPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfVxufVxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFN0eWxlTGF5ZXJHcm91cCBmcm9tICcuLi8uLi9jb21wb25lbnRzL2xheWVycy9TdHlsZUxheWVyR3JvdXAnO1xuXG5pbnRlcmZhY2UgSVByb3BzIHt9XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExheWVyQnJvd3NlTGlzdCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxJUHJvcHM+IHtcbiAgICBwdWJsaWMgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICA8U3R5bGVMYXllckdyb3VwIC8+XG4gICAgICAgICAgICAgICAgPFN0eWxlTGF5ZXJHcm91cCAvPlxuICAgICAgICAgICAgICAgIDxTdHlsZUxheWVyR3JvdXAgLz5cbiAgICAgICAgICAgICAgICA8U3R5bGVMYXllckdyb3VwIC8+XG4gICAgICAgICAgICAgICAgPFN0eWxlTGF5ZXJHcm91cCAvPlxuICAgICAgICAgICAgICAgIDxTdHlsZUxheWVyR3JvdXAgLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgIH1cbn1cbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW50ZXJmYWNlIElQcm9wcyB7fVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMYXllckZpbHRlckFjdGlvbnMgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8SVByb3BzPiB7XG4gICAgcHVibGljIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidHh0LXhzIGZsZXgtcGFyZW50IGZsZXgtcGFyZW50LS1jZW50ZXItY3Jvc3MgZmxleC1wYXJlbnQtLXNwYWNlLWJldHdlZW4tbWFpblwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleC1jaGlsZCB1bnNlbGVjdGFibGVcIj7lhbHmnIkxMjLkuKrlm77lsYI8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXgtY2hpbGQgcHkzXCI+XG4gICAgICAgICAgICAgICAgICAgIHsvKiBIZXJlIGlzIGZvciBmaWx0ZXIgYnV0dG9uICovfVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgSWNvbiwgVG9vbHRpcCB9IGZyb20gJ2FudGQnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuXG5pbnRlcmZhY2UgSVByb3BzIHtcbiAgICByb3V0ZTogc3RyaW5nO1xufVxuXG5jb25zdCBpY29uU3R5bGUgPSB7XG4gICAgZm9udFNpemU6ICcxOHB4JyxcbiAgICBoZWlnaHQ6ICcyNHB4JyxcbiAgICB3aWR0aDogJzE4cHgnLFxufTtcblxuY29uc3QgRWRpdG9yQmFja0J1dHRvbjogUmVhY3QuU3RhdGVsZXNzQ29tcG9uZW50PElQcm9wcz4gPSAocHJvcHM6IElQcm9wcykgPT4ge1xuICAgIHJldHVybiAoXG4gICAgICAgIDxUb29sdGlwXG4gICAgICAgICAgICBwbGFjZW1lbnQ9XCJyaWdodFwiXG4gICAgICAgICAgICB0aXRsZT17KCkgPT4gPHNwYW4gY2xhc3NOYW1lPVwidW5zZWxlY3RhYmxlXCI+6L+U5ZuePC9zcGFuPn1cbiAgICAgICAgPlxuICAgICAgICAgICAgPExpbmsgY2xhc3NOYW1lPVwiIG1sLW5lZzYgYmxvY2sgbGlua1wiIHRvPXtwcm9wcy5yb3V0ZX0+XG4gICAgICAgICAgICAgICAgPEljb24gdHlwZT1cImxlZnRcIiBzdHlsZT17aWNvblN0eWxlfSAvPlxuICAgICAgICAgICAgICAgIDxJY29uIHR5cGU9XCJnaXRodWJcIiBzdHlsZT17aWNvblN0eWxlfSAvPlxuICAgICAgICAgICAgPC9MaW5rPlxuICAgICAgICA8L1Rvb2x0aXA+XG4gICAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEVkaXRvckJhY2tCdXR0b247XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgRWRpdG9yQmFja0J1dHRvbiBmcm9tICcuL0VkaXRvckJhY2tCdXR0b24nO1xuaW1wb3J0IFJlbmFtZUlucHV0IGZyb20gJy4vUmVuYW1lSW5wdXQnO1xuXG5pbnRlcmZhY2UgSVByb3BzIHtcbiAgICByb3V0ZTogc3RyaW5nO1xuICAgIG5hbWU6IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgICBvbkNvbmZpcm06IChuYW1lOiBzdHJpbmcpID0+IHZvaWQ7XG59XG5cbmNvbnN0IEVkaXRvclRpdGxlOiBSZWFjdC5GdW5jdGlvbkNvbXBvbmVudDxJUHJvcHM+ID0gKHByb3BzOiBJUHJvcHMpID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIiBmbGV4LXBhcmVudFwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4LWNoaWxkIGZsZXgtY2hpbGQtLW5vLXNocmlua1wiPlxuICAgICAgICAgICAgICAgIDxFZGl0b3JCYWNrQnV0dG9uIHJvdXRlPXtwcm9wcy5yb3V0ZX0gLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4LWNoaWxkIGZsZXgtY2hpbGQtLWdyb3dcIj5cbiAgICAgICAgICAgICAgICA8UmVuYW1lSW5wdXQgbGFiZWxOYW1lPXtwcm9wcy5uYW1lfSAgLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgRWRpdG9yVGl0bGU7XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgRWRpdG9yVGl0bGUgZnJvbSAnLi4vLi4vY29tcG9uZW50cy9zaGFyZWQvRWRpdG9yVGl0bGUnO1xuXG5pbnRlcmZhY2UgSVByb3BzIHtcbiAgICByb3V0ZTogc3RyaW5nO1xuICAgIG5hbWU6IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgICBvbkNvbmZpcm06IChuYW1lOiBzdHJpbmcpID0+IHZvaWQ7XG59XG5cbmNvbnN0IExheWVySGVhZGVyOiBSZWFjdC5GdW5jdGlvbkNvbXBvbmVudDxJUHJvcHM+ID0gKHByb3BzOiBJUHJvcHMpID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBiM1wiPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4LXBhcmVudFwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleC1jaGlsZCBmbGV4LWNoaWxkLS1uby1zaHJpbmtcIj5cbiAgICAgICAgICAgICAgICAgICAgPEVkaXRvclRpdGxlXG4gICAgICAgICAgICAgICAgICAgICAgICByb3V0ZT1cIi9cIlxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT17cHJvcHMubmFtZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ29uZmlybT17cHJvcHMub25Db25maXJtfVxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBMYXllckhlYWRlcjtcbiIsImltcG9ydCB7IEljb24sIFRvb2x0aXAgfSBmcm9tICdhbnRkJztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxuXG5pbnRlcmZhY2UgSVByb3BzIHtcbiAgICAvLyBvbkFkZE5ld0xheWVyOiAoKSA9PiB2b2lkO1xuICAgIC8vIG9uRHVwbGljYXRlOiAoKSA9PiB2b2lkO1xuICAgIC8vIG9uVG9nZ2xlR3JvdXA6ICgpID0+IHZvaWQ7XG4gICAgLy8gb25Ub2dnbGVWaXNpYmlsaXR5OiAoKSA9PiB2b2lkO1xuICAgIC8vIG9uRGVsZXRlOiAoKSA9PiB2b2lkO1xuICAgIC8vIHNlbGVjdGVkTGF5ZXJzOiBhbnk7XG4gICAgLy8gbGF5ZXJzQXJlRmlsdGVyZWQ6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExheWVyU2VsZWN0ZWRBY3Rpb25zIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PElQcm9wcz4ge1xuICAgIHB1YmxpYyByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXgtcGFyZW50IGZsZXgtcGFyZW50LS1jZW50ZXItY3Jvc3NcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInR4dC14cyBmbGV4LWNoaWxkIGZsZXgtY2hpbGQtLWdyb3cgbXIxMlwiPlxuICAgICAgICAgICAgICAgICAgICA8VG9vbHRpcCBwbGFjZW1lbnQ9XCJ0b3BcIiB0aXRsZT1cIua3u+WKoOWbvuWxglwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImJ0biBidG4tLWdyYXkgYnRuLS1zIHJvdW5kIHB4NiB3LWZ1bGxcIlxuICAgICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImZsZXgtcGFyZW50IGZsZXgtcGFyZW50LS1jZW50ZXItY3Jvc3NcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiZmxleC1jaGlsZFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEljb24gdHlwZT1cImZpbGUtYWRkXCIgdGhlbWU9XCJmaWxsZWRcIiAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImZsZXgtY2hpbGRcIj7mt7vliqDlm77lsYI8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDwvVG9vbHRpcD5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXgtY2hpbGQgZmxleC1jaGlsZC0tbm8tc2hyaW5rIG1yLW5lZzZcIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4LXBhcmVudFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFRvb2x0aXAgcGxhY2VtZW50PVwidG9wXCIgdGl0bGU9XCLlpI3liLblm77lsYJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJidG4gYmctdHJhbnNwYXJlbnQgbGluayBsaW5rLS1ncmF5IHR4dC14cyBweTMgcHgzXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxJY29uIHR5cGU9XCJjb3B5XCIgdGhlbWU9XCJmaWxsZWRcIiAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Ub29sdGlwPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFRvb2x0aXAgcGxhY2VtZW50PVwidG9wXCIgdGl0bGU9XCLmt7vliqDliIbnu4RcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJidG4gYmctdHJhbnNwYXJlbnQgbGluayBsaW5rLS1ncmF5IHR4dC14cyBweTMgcHgzIHB4M1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8SWNvbiB0eXBlPVwiZm9sZGVyLW9wZW5cIiB0aGVtZT1cImZpbGxlZFwiIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1Rvb2x0aXA+XG4gICAgICAgICAgICAgICAgICAgICAgICA8VG9vbHRpcCBwbGFjZW1lbnQ9XCJ0b3BcIiB0aXRsZT1cIuaYvuekuuWbvuWxglwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImJ0biBiZy10cmFuc3BhcmVudCBsaW5rIGxpbmstLWdyYXkgdHh0LXhzIHB5MyBweDMgcHgzXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxJY29uIHR5cGU9XCJleWVcIiB0aGVtZT1cImZpbGxlZFwiIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1Rvb2x0aXA+XG4gICAgICAgICAgICAgICAgICAgICAgICA8VG9vbHRpcCBwbGFjZW1lbnQ9XCJ0b3BcIiB0aXRsZT1cIuWIoOmZpOWbvuWxglwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImJ0biBiZy10cmFuc3BhcmVudCBsaW5rIGxpbmstLWdyYXkgdHh0LXhzIHB5MyBweDMgcHgzXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxJY29uIHR5cGU9XCJkZWxldGVcIiB0aGVtZT1cImZpbGxlZFwiIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1Rvb2x0aXA+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfVxufVxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7IERpc3BhdGNoLCBJUm9vdFN0YXRlIH0gZnJvbSAnLi4vLi4vc3RvcmUnO1xuaW1wb3J0IExheWVyQnJvd3NlTGlzdCBmcm9tICcuL0xheWVyQnJvd3NlTGlzdCc7XG5pbXBvcnQgTGF5ZXJGaWx0ZXJBY3Rpb25zIGZyb20gJy4vTGF5ZXJGaWx0ZXJBY3Rpb25zJztcbmltcG9ydCBMYXllckhlYWRlciBmcm9tICcuL0xheWVySGVhZGVyJztcbmltcG9ydCBMYXllclNlbGVjdGVkQWN0aW9ucyBmcm9tICcuL0xheWVyU2VsZWN0ZWRBY3Rpb25zJztcblxudHlwZSBQcm9wcyA9IFJldHVyblR5cGU8dHlwZW9mIG1hcFN0YXRlPiAmIFJldHVyblR5cGU8dHlwZW9mIG1hcERpc3BhdGNoPjtcbmNsYXNzIExheWVyTGlzdCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcz4ge1xuICAgIHB1YmxpYyByZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IHsgbmFtZSB9ID0gdGhpcy5wcm9wcy5tYXBTdHlsZTtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICBpZD1cImNhcmQtc3R5bGUtbGF5ZXJzLXBhbmVcIlxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cIiBhYnNvbHV0ZSB0b3AgbGVmdCBib3R0b20gYmctd2hpdGUgZmxleC1wYXJlbnQgZmxleC1wYXJlbnQtLWNvbHVtbiBcIlxuICAgICAgICAgICAgICAgIHN0eWxlPXt7IHdpZHRoOiAnMjEwcHgnIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4LWNoaWxkIGZsZXgtY2hpbGQtLW5vLXNocmluayBteTMgcHQ2IHBiNiBteDEyIGJvcmRlci1iIGJvcmRlci0tZ3JheS1saWdodFwiPlxuICAgICAgICAgICAgICAgICAgICA8TGF5ZXJIZWFkZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9e25hbWV9XG4gICAgICAgICAgICAgICAgICAgICAgICByb3V0ZT1cIi9cIlxuICAgICAgICAgICAgICAgICAgICAgICAgb25Db25maXJtPXt0aGlzLnByb3BzLnJlbmFtZVN0eWxlc2hlZXR9XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXQ2IG1iNiBwdDYgYm9yZGVyLXQgYm9yZGVyLS1ncmF5LWxpZ2h0XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8TGF5ZXJTZWxlY3RlZEFjdGlvbnMgLz5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8TGF5ZXJGaWx0ZXJBY3Rpb25zIC8+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleC1jaGlsZCBmbGV4LWNoaWxkLS1ncm93IHNjcm9sbC1hdXRvIHNjcm9sbC1zdHlsZWRcIj5cbiAgICAgICAgICAgICAgICAgICAgPExheWVyQnJvd3NlTGlzdCAvPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfVxufVxuXG5jb25zdCBtYXBTdGF0ZSA9IChzdGF0ZTogSVJvb3RTdGF0ZSkgPT4gKHtcbiAgICBtYXBTdHlsZTogc3RhdGUubWFwU3R5bGUsXG59KTtcblxuY29uc3QgbWFwRGlzcGF0Y2ggPSAoZGlzcGF0Y2g6IERpc3BhdGNoKSA9PiAoe1xuICAgIHJlbmFtZVN0eWxlc2hlZXQ6IChuYW1lOiBzdHJpbmcpID0+IGRpc3BhdGNoLm1hcFN0eWxlLnJlbmFtZShuYW1lKSxcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KFxuICAgIG1hcFN0YXRlLFxuICAgIG1hcERpc3BhdGNoLFxuKShMYXllckxpc3QpO1xuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbnRlcmZhY2UgSVByb3BzIHtcbiAgICB0ZXN0Pzogc3RyaW5nO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNYXAgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8SVByb3BzPiB7XG4gICAgY29uc3RydWN0b3IocHJvcHM6IElQcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgfVxuICAgIHB1YmxpYyByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgaWQ9XCJtYXBcIlxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImFic29sdXRlIHRvcCBsZWZ0IHJpZ2h0IGJvdHRvbSBmaWxsLWNhbnZhcyBtYXBib3hnbC1tYXBcIlxuICAgICAgICAgICAgLz5cbiAgICAgICAgKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgTGF5ZXJFZGl0b3IgZnJvbSAnLi4vY29udGFpbmVycy9sYXllckVkaXRvcic7XG5pbXBvcnQgTGF5ZXJMaXN0IGZyb20gJy4uL2NvbnRhaW5lcnMvbGF5ZXJMaXN0JztcbmltcG9ydCBNYXAgZnJvbSAnLi4vY29udGFpbmVycy9tYXAnO1xuXG5jb25zdCBFZGl0b3I6IFJlYWN0LlN0YXRlbGVzc0NvbXBvbmVudDx7fT4gPSAoKSA9PiB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdlxuICAgICAgICAgICAgaWQ9XCJjb250YWluZXJcIlxuICAgICAgICAgICAgY2xhc3NOYW1lPVwiYmctd2hpdGUgc2VsZWN0LW5vbmUgYWJzb2x1dGUgdG9wIHJpZ2h0IGJvdHRvbSBsZWZ0XCJcbiAgICAgICAgPlxuICAgICAgICAgICAgPE1hcCAvPlxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICA8TGF5ZXJMaXN0IC8+XG4gICAgICAgICAgICAgICAgPExheWVyRWRpdG9yIC8+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEVkaXRvcjtcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBFZGl0b3IgZnJvbSAnLi92aWV3cy9FZGl0b3InO1xuXG4vLyBpbXBvcnQgVGVzdENvdW50IGZyb20gJy4vVGVzdENvdW50JztcblxuaW50ZXJmYWNlIElQcm9wcyB7XG4gICAgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZUFycmF5O1xufVxuXG5jb25zdCBBcHA6IFJlYWN0LlN0YXRlbGVzc0NvbXBvbmVudDxJUHJvcHM+ID0gKHByb3BzOiBJUHJvcHMpID0+IChcbiAgICA8ZGl2PlxuICAgICAgICB7LyogPFRlc3RDb3VudC8+ICovfVxuICAgICAgICA8RWRpdG9yIC8+XG4gICAgPC9kaXY+XG4pO1xuXG5leHBvcnQgZGVmYXVsdCBBcHA7XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBIYXNoUm91dGVyIGFzIFJvdXRlcywgUm91dGUsIFN3aXRjaCB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuaW1wb3J0IEFwcCBmcm9tICcuL0FwcCc7XG5cbmNvbnN0IEFwcFJvdXRlcjogUmVhY3QuU3RhdGVsZXNzQ29tcG9uZW50PHt9PiA9ICgpID0+IChcbiAgICA8Um91dGVzPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZpeGVkIHRvcCByaWdodCBib3R0b20gbGVmdFwiPlxuICAgICAgICAgICAgPFN3aXRjaD5cbiAgICAgICAgICAgICAgICA8Um91dGUgZXhhY3QgcGF0aD1cIi9cIiBjb21wb25lbnQ9e0FwcH0gLz5cbiAgICAgICAgICAgIDwvU3dpdGNoPlxuICAgICAgICA8L2Rpdj5cbiAgICA8L1JvdXRlcz5cbik7XG5cbmV4cG9ydCBkZWZhdWx0IEFwcFJvdXRlcjtcbiIsIi8qKlxuICogVGhpcyBpcyB0ZXN0IGNvZGUgLHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dFxuICovXG5pbXBvcnQgeyBjcmVhdGVNb2RlbCB9IGZyb20gJ0ByZW1hdGNoL2NvcmUnO1xuXG5jb25zdCBkZWxheSA9IChtczogbnVtYmVyKSA9PlxuICAgIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIG1zKSk7XG5cbnR5cGUgdGVzdFN0YXRlID0gbnVtYmVyO1xuXG5leHBvcnQgY29uc3QgdGVzdCA9IGNyZWF0ZU1vZGVsKHtcbiAgICBzdGF0ZTogMCxcbiAgICByZWR1Y2Vyczoge1xuICAgICAgICBpbmNyZW1lbnQ6IChzdGF0ZTogdGVzdFN0YXRlKSA9PiBzdGF0ZSArIDEsXG4gICAgfSxcbiAgICBlZmZlY3RzOiAoZGlzcGF0Y2gpID0+ICh7XG4gICAgICAgIGFzeW5jIGluY3JlbWVudEFzeW5jKCkge1xuICAgICAgICAgICAgYXdhaXQgZGVsYXkoNTAwKTtcbiAgICAgICAgICAgIGRpc3BhdGNoLnRlc3QuaW5jcmVtZW50KCk7XG4gICAgICAgIH0sXG4gICAgfSksXG59KTtcbiIsImltcG9ydCB7IFN0eWxlIH0gZnJvbSAnbWFwYm94LWdsJztcbmltcG9ydCB7IEVtcHR5U3RhdGUsIGluZGV4T2ZMYXllciwgcmVOYW1lU3R5bGUgfSBmcm9tICcuLi91dGlscy9zdHlsZSc7XG5cbmNvbnN0IFRlc3RTdHlsZSA9IE9iamVjdC5hc3NpZ24oRW1wdHlTdGF0ZSwgeyBuYW1lOiAnc2hpeHknIH0pO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgc3RhdGU6IFRlc3RTdHlsZSxcbiAgICByZWR1Y2Vyczoge1xuICAgICAgICByZW5hbWUoc3RhdGU6IFN0eWxlLCBuYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiByZU5hbWVTdHlsZShzdGF0ZSwgbmFtZSk7XG4gICAgICAgIH0sXG4gICAgfSxcbiAgICBlZmZlY3RzOiB7fSxcbn07XG4iLCJpbXBvcnQgeyBnZXQsIHNldCB9IGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBMYXllciwgU3R5bGUgfSBmcm9tICdtYXBib3gtZ2wnO1xuXG5leHBvcnQgY29uc3QgRW1wdHlTdGF0ZTogU3R5bGUgPSB7XG4gICAgdmVyc2lvbjogOCxcbiAgICBzb3VyY2VzOiB7fSxcbiAgICBsYXllcnM6IFtdLFxufTtcblxudHlwZSBpbmRleE9mTGF5ZXIgPSBudW1iZXI7XG5leHBvcnQgY29uc3QgaW5kZXhPZkxheWVyOiAoXG4gICAgbGF5ZXJzOiBMYXllcltdLFxuICAgIGxheWVySWQ6IHN0cmluZyxcbikgPT4gaW5kZXhPZkxheWVyID0gKGxheWVyczogTGF5ZXJbXSwgbGF5ZXJJZDogc3RyaW5nKSA9PiB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsYXllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGxheWVyc1tpXS5pZCA9PT0gbGF5ZXJJZCkge1xuICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xufTtcblxuLyoqXG4gKiDph43lkb3lkI1cbiAqIEBwYXJhbSBzdHlsZVxuICogQHBhcmFtIG5hbWVcbiAqL1xuZXhwb3J0IGNvbnN0IHJlTmFtZVN0eWxlOiAoc3R5bGU6IFN0eWxlLCBuYW1lOiBzdHJpbmcpID0+IFN0eWxlID0gKFxuICAgIHN0eWxlLFxuICAgIG5hbWUsXG4pID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdHlsZSxcbiAgICAgICAgbmFtZSxcbiAgICB9O1xufTtcblxuLyoqXG4gKiBMYXllciBncm91cFxuICovXG5cbmV4cG9ydCBjb25zdCBncm91cExheWVyczogKFxuICAgIHN0eWxlOiBTdHlsZSxcbiAgICBsYXllcklkczogc3RyaW5nW10sXG4gICAgZ3JvdXBJZDogc3RyaW5nLFxuICAgIG5hbWU6IHN0cmluZyxcbikgPT4gU3R5bGUgPSAoc3R5bGUsIGxheWVySWRzLCBncm91cElkLCBuYW1lKSA9PiB7XG4gICAgbGV0IHN0eWxlU2hlZXQgPSB7IC4uLnN0eWxlIH07XG4gICAgbGF5ZXJJZHMuZm9yRWFjaCgoaWQpID0+IHtcbiAgICAgICAgY29uc3QgaW5kZXggPSBpbmRleE9mTGF5ZXIoc3R5bGUubGF5ZXJzIHx8IFtdLCBpZCk7XG4gICAgICAgIGlmIChpbmRleCA9PT0gLTEpIHJldHVybjtcbiAgICAgICAgc3R5bGVTaGVldCA9IHNldChcbiAgICAgICAgICAgIHN0eWxlU2hlZXQsXG4gICAgICAgICAgICBgbGF5ZXJzWyR7aW5kZXh9XVttZXRhZGF0YV1bbWFwYm94X2dyb3VwXWAsXG4gICAgICAgICAgICBncm91cElkLFxuICAgICAgICApO1xuICAgIH0pO1xuICAgIHJldHVybiBzdHlsZVNoZWV0O1xufTtcblxuZXhwb3J0IGNvbnN0IHJlbmFtZUxheWVyR3JvdXA6IChcbiAgICBzdHlsZTogU3R5bGUsXG4gICAgZ3JvdXBJZDogc3RyaW5nLFxuICAgIG5hbWU6IHN0cmluZyxcbikgPT4gU3R5bGUgPSAoc3R5bGUsIGdyb3VwSWQsIG5hbWUpID0+IHtcbiAgICBjb25zdCBzdHlsZVNoZWV0ID0geyAuLi5zdHlsZSB9O1xuICAgIGNvbnN0IGxheWVycyA9IHN0eWxlU2hlZXQubGF5ZXJzIHx8IFtdO1xuXG4gICAgbGF5ZXJzLm1hcCgobGF5ZXI6IExheWVyLCBpbmRleDogbnVtYmVyKSA9PiB7XG4gICAgICAgIGlmIChsYXllci5tZXRhZGF0YSAmJiBsYXllci5tZXRhZGF0YS5tYXBib3hfZ3JvdXAgPT09IGdyb3VwSWQpIHtcbiAgICAgICAgICAgIGxheWVyLm1ldGFkYXRhLm1hcGJveF9ncm91cCA9IG5hbWU7XG4gICAgICAgICAgICByZXR1cm4gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxheWVyO1xuICAgIH0pO1xuICAgIHNldChzdHlsZVNoZWV0LCAnbGF5ZXJzJywgbGF5ZXJzKTtcbiAgICByZXR1cm4gc3R5bGVTaGVldDtcbn07XG5cbmV4cG9ydCBjb25zdCB1bkdyb3VwTGF5ZXI6IChzdHlsZTogU3R5bGUsIGxheWVySWRzOiBzdHJpbmdbXSkgPT4gU3R5bGUgPSAoXG4gICAgc3R5bGUsXG4gICAgbGF5ZXJJZHMsXG4pID0+IHtcbiAgICBjb25zdCBzdHlsZVNoZWV0ID0geyAuLi5zdHlsZSB9O1xuICAgIGNvbnN0IGxheWVycyA9IHN0eWxlLmxheWVycyB8fCBbXTtcbiAgICBsYXllcklkcy5mb3JFYWNoKChpZCkgPT4ge1xuICAgICAgICBsYXllcnMuZm9yRWFjaCgobGF5ZXIpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gaW5kZXhPZkxheWVyKGxheWVycywgaWQpO1xuICAgICAgICAgICAgaWYgKGxheWVyc1tpbmRleF0gJiYgbGF5ZXJzW2luZGV4XS5tZXRhZGF0YSkge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBsYXllcnNbaW5kZXhdLm1ldGFkYXRhLm1hcGJveF9ncm91cDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgc2V0KHN0eWxlU2hlZXQsICdsYXllcnMnLCBsYXllcnMpO1xuICAgIHJldHVybiBzdHlsZVNoZWV0O1xufTtcblxuXG4iLCJpbXBvcnQgeyBpbml0LCBSZW1hdGNoUm9vdFN0YXRlIH0gZnJvbSAnQHJlbWF0Y2gvY29yZSc7XG5pbXBvcnQgKiBhcyBtb2RlbHMgZnJvbSAnLi9tb2RlbHMnO1xuXG5leHBvcnQgY29uc3Qgc3RvcmUgPSBpbml0KHtcbiAgICBtb2RlbHMsXG59KTtcblxuZXhwb3J0IHR5cGUgU3RvcmUgPSB0eXBlb2Ygc3RvcmU7XG5leHBvcnQgdHlwZSBEaXNwYXRjaCA9IHR5cGVvZiBzdG9yZS5kaXNwYXRjaDtcbmV4cG9ydCB0eXBlIElSb290U3RhdGUgPSBSZW1hdGNoUm9vdFN0YXRlPHR5cGVvZiBtb2RlbHM+O1xuIiwiaW1wb3J0ICdAbWFwYm94L21ieC1hc3NlbWJseS9kaXN0L2Fzc2VtYmx5LmpzJztcbmltcG9ydCAnYW50ZC9kaXN0L2FudGQuY3NzJztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCAqIGFzIFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgeyBQcm92aWRlciB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCBSb3V0ZXIgZnJvbSAnLi9yb3V0ZXInO1xuaW1wb3J0IHsgc3RvcmUgfSBmcm9tICcuL3N0b3JlJztcblxuUmVhY3RET00ucmVuZGVyKFxuICAgIDxQcm92aWRlciBzdG9yZT17c3RvcmV9PlxuICAgICAgICA8Um91dGVyIC8+XG4gICAgPC9Qcm92aWRlcj4sXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jvb3QnKSBhcyBIVE1MRWxlbWVudCxcbik7XG4iXSwic291cmNlUm9vdCI6IiJ9